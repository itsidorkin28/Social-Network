{"version":3,"sources":["components/Profile/MyPosts/Post/Post.module.scss","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/users-api.ts","redux/users-reducer.ts","api/auth-api.ts","redux/auth-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Profile/UserDescription/UserDescription.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","AppRoutes.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Navbar/Navbar.module.scss","components/Profile/Profile.module.scss","components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogItem/DialogItem.module.scss","components/Users/Users.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Dialogs/Message/Message.module.scss","components/Profile/UserDescription/UserDescription.module.scss"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","profileAPI","paramsUserID","get","initialState","posts","id","v1","post","likesCount","postText","profile","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","userId","photos","small","large","dialogs","name","messages","message","messageText","usersAPI","currentPage","pageSize","then","response","console","log","data","userID","delete","usersList","totalUsersCount","isFetching","isFollowing","disableButton","toggleIsFollowing","type","toggleIsFetching","getUsers","dispatch","users","items","totalCount","authAPI","login","email","fieldsErrors","resultCode","isAuth","getAuthUserData","setAuthUserData","rootReducer","combineReducers","profilePage","state","action","newPost","dialogsPage","newMessage","usersPage","map","u","followed","filter","auth","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","s","navbar","to","isActive","active","DialogItem","path","dialogItem","Message","Dialogs","useDispatch","dialogsElements","d","messagesElements","m","sendMessageHandler","useCallback","trim","sendMessage","dialogsItems","messagesItems","Box","component","sx","mb","width","noValidate","autoComplete","TextField","label","multiline","maxRows","value","onChange","e","changeMessage","currentTarget","onKeyPress","ctrlKey","key","Stack","direction","spacing","Button","variant","endIcon","onClick","withAuthRedirect","Component","props","useSelector","DialogsContainer","compose","Users","React","memo","followUserHandler","unfollowUserHandler","user","Avatar","alt","src","height","color","size","disabled","some","status","UsersContainer","useEffect","changeCurrentPage","followUser","unfollowUser","pagesCount","Math","ceil","style","display","justifyContent","flexDirection","alignItems","Pagination","count","CircularProgress","marginTop","marginBottom","UserDescription","userDescription","Post","MyPosts","postsElements","addPostHandler","myPosts","postForm","IconButton","marginLeft","PostAdd","MyPostsContainer","Profile","ProfileContainer","useParams","Login","AppRoutes","element","Header","flexGrow","AppBar","position","Toolbar","Typography","HeaderContainer","App","app","Paper","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcbae975.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1jere\"};","import axios from \"axios\";\nimport {UserDescriptionType} from \"../redux/profile-reducer\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const profileAPI = {\n    getProfile(paramsUserID: string | undefined) {\n        return instance.get<UserDescriptionType>(`profile/${paramsUserID}`)\n    }\n}","import {PostType} from \"../components/Profile/MyPosts/Post/Post\";\nimport {v1} from \"uuid\";\nimport { Dispatch } from \"redux\";\nimport { profileAPI } from \"../api/profile-api\";\n\nexport type UserDescriptionType = {\n    aboutMe: string\n    contacts: {\n        facebook: string\n        website: string\n        vk: string\n        twitter: string\n        instagram: string\n        youtube: string\n        github: string\n        mainLink: string\n    },\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    userId: number\n    photos: {\n        small: string\n        large: string\n    }\n}\n\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    postText: string\n    profile: UserDescriptionType\n}\n\nconst initialState: ProfilePageType = {\n    posts: [\n        {id: v1(), post: 'Hello!', likesCount: 3},\n        {id: v1(), post: 'JS!', likesCount: 9}\n    ],\n    postText: '',\n    profile: {\n        aboutMe: \"я круто чувак 1001%\",\n        contacts: {\n            facebook: \"facebook.com\",\n            website: 'ffds',\n            vk: \"vk.com/dimych\",\n            twitter: \"https://twitter.com/@sdf\",\n            instagram: \"instagra.com/sds\",\n            youtube: 'fdsfds',\n            github: \"github.com\",\n            mainLink: 'fdsfds'\n        },\n        lookingForAJob: true,\n        lookingForAJobDescription: \"не ищу, а дурачусь\",\n        fullName: \"samurai dimych\",\n        userId: 2,\n        photos: {\n            small: \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\",\n            large: \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\n        }\n    }\n}\n\n\n\nexport const profileReducer = (state = initialState, action: ProfileActionsTypes): ProfilePageType => {\n    switch (action.type) {\n        case 'ADD-POST':\n            const newPost: PostType = {id: v1(), post: action.postText, likesCount: 0}\n            return {...state, posts: [newPost, ...state.posts], postText: ''}\n        case 'CHANGE-POST-TEXT':\n            return {...state, postText: action.postText}\n        case 'SET-USER-PROFILE':\n            return {...state, profile: action.profile}\n        default:\n            return state\n    }\n}\n\nexport type ProfileActionsTypes = AddPostType | ChangePostType | SetUserProfileType\n\ntype SetUserProfileType = ReturnType<typeof setUserProfile>\nexport const setUserProfile = (profile: UserDescriptionType) => {\n    return {\n        type: 'SET-USER-PROFILE',\n        profile\n    } as const\n}\n\ntype AddPostType = ReturnType<typeof addPost>\nexport const addPost = (postText: string) => {\n    return {\n        type: 'ADD-POST',\n        postText\n    } as const\n}\n\nexport type ChangePostType = ReturnType<typeof changePost>\nexport const changePost = (postText: string) => {\n    return {\n        type: 'CHANGE-POST-TEXT',\n        postText\n    } as const\n}\n\nexport const setUserProfileThunk = (paramsUserID: string | undefined) => (dispatch: Dispatch) => {\n    profileAPI.getProfile(paramsUserID)\n        .then(response => {\n            dispatch(setUserProfile(response.data))\n        })\n}","import {MessageType} from \"../components/Dialogs/Message/Message\";\nimport {v1} from \"uuid\";\nimport {DialogItemType} from \"../components/Dialogs/DialogItem/DialogItem\";\n\nexport type DialogsPageType = {\n    dialogs: Array<DialogItemType>\n    messages: Array<MessageType>\n    messageText: string\n}\nconst initialState = {\n    dialogs: [\n        {id: v1(), name: 'Alexander'},\n        {id: v1(), name: 'Alena'}\n    ],\n    messages: [\n        {id: v1(), message: 'Hello!'},\n        {id: v1(), message: 'How are you?'}\n    ],\n    messageText: ''\n}\n\nexport type DialogsActionsTypes = SendMessageType | ChangeMessageTextType\n\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: DialogsActionsTypes): DialogsPageType => {\n    switch (action.type) {\n        case 'SEND-MESSAGE':\n            const newMessage: MessageType = {id: v1(), message: action.messageText}\n            return {...state, messages: [...state.messages, newMessage], messageText: ''}\n        case 'CHANGE-MESSAGE-TEXT':\n            return {...state, messageText: action.messageText}\n        default:\n            return state\n    }\n}\n\ntype SendMessageType = ReturnType<typeof sendMessage>\nexport const sendMessage = (messageText: string) => {\n    return {\n        type: 'SEND-MESSAGE',\n        messageText\n    } as const\n}\n\ntype ChangeMessageTextType = ReturnType<typeof changeMessage>\nexport const changeMessage = (messageText: string) => {\n    return {\n        type: 'CHANGE-MESSAGE-TEXT',\n        messageText\n    } as const\n}","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\n        return instance.get<GetUserType>(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => {\n                console.log(response.data)\n                return response.data\n\n            })\n    },\n    followUser(userID: number) {\n        return instance.post<PostAndDeleteFollowType>(`follow/${userID}`)\n    },\n    unfollowUser(userID: number) {\n        return instance.delete<PostAndDeleteFollowType>(`follow/${userID}`)\n    },\n}\n\ntype PostAndDeleteFollowType = {\n    data: {},\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    resultCode: number\n}\n\ntype UserType = {\n    name: string\n    id: number\n    uniqueUrlName: string\n    photos: {\n        small: string\n        large: string\n    }\n    status: string\n    followed: boolean\n}\n\ntype GetUserType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string\n}\n\n\n","import {Dispatch} from \"redux\"\nimport {usersAPI} from \"../api/users-api\";\n\nexport type UserType = {\n    name: string\n    id: number\n    uniqueUrlName: string\n    photos: {\n        small: string\n        large: string\n    }\n    status: string\n    followed: boolean\n}\n\nexport type UsersPageType = {\n    usersList: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    isFollowing: Array<number>\n    disableButton: boolean\n}\n\nconst initialState: UsersPageType = {\n    usersList: [],\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    isFollowing: [],\n    disableButton: false,\n}\n\nexport const usersReducer = (state = initialState, action: UsersActionsTypes): UsersPageType => {\n    switch (action.type) {\n        case 'FOLLOW':\n            return {...state, usersList: state.usersList.map(u => u.id === action.id ? {...u, followed: true} : u)}\n        case 'UNFOLLOW':\n            return {...state, usersList: state.usersList.map(u => u.id === action.id ? {...u, followed: false} : u)}\n        case 'SET-USERS':\n            return {...state, usersList: action.users}\n        case 'SET-CURRENT-PAGE':\n            return {...state, currentPage: action.currentPage}\n        case 'SET-TOTAL-USERS-COUNT':\n            return {...state, totalUsersCount: action.totalUsersCount}\n        case 'TOGGLE_IS_FETCHING':\n            return {...state, isFetching: action.isFetching}\n        case 'TOGGLE_IS_FOLLOWING':\n            return {\n                ...state,\n                isFollowing: action.disableButton\n                    ? [...state.isFollowing, action.userID]\n                    : [...state.isFollowing.filter(id => id !== action.userID)]\n            }\n        default:\n            return state\n    }\n}\n\nexport type UsersActionsTypes =\n    FollowType\n    | UnfollowType\n    | SetUsersType\n    | SetCurrentPageType\n    | SetTotalUsersCountType\n    | ToggleIsFetchingType\n    | ToggleIsFollowingType\n\ntype ToggleIsFollowingType = ReturnType<typeof toggleIsFollowing>\nexport const toggleIsFollowing = (disableButton: boolean, userID: number) => {\n    return {\n        type: 'TOGGLE_IS_FOLLOWING',\n        disableButton,\n        userID,\n    } as const\n}\n\ntype ToggleIsFetchingType = ReturnType<typeof toggleIsFetching>\nexport const toggleIsFetching = (isFetching: boolean) => {\n    return {\n        type: 'TOGGLE_IS_FETCHING',\n        isFetching,\n    } as const\n}\n\ntype FollowType = ReturnType<typeof follow>\nexport const follow = (id: number) => {\n    return {\n        type: 'FOLLOW',\n        id,\n    } as const\n}\n\ntype UnfollowType = ReturnType<typeof unfollow>\nexport const unfollow = (id: number) => {\n    return {\n        type: 'UNFOLLOW',\n        id,\n    } as const\n}\n\ntype SetUsersType = ReturnType<typeof setUsers>\nexport const setUsers = (users: Array<UserType>) => {\n    return {\n        type: 'SET-USERS',\n        users,\n    } as const\n}\n\ntype SetCurrentPageType = ReturnType<typeof setCurrentPage>\nexport const setCurrentPage = (currentPage: number) => {\n    return {\n        type: 'SET-CURRENT-PAGE',\n        currentPage,\n    } as const\n}\n\ntype SetTotalUsersCountType = ReturnType<typeof setTotalUsersCount>\nexport const setTotalUsersCount = (totalUsersCount: number) => {\n    return {\n        type: 'SET-TOTAL-USERS-COUNT',\n        totalUsersCount,\n    } as const\n}\n\nexport const getUsers = (currentPage: number, pageSize: number) => (dispatch: Dispatch) => {\n    dispatch(toggleIsFetching(true))\n    usersAPI.getUsers(currentPage, pageSize)\n        .then(response => {\n            dispatch(toggleIsFetching(false))\n            dispatch(setUsers(response.items))\n            dispatch(setTotalUsersCount(response.totalCount))\n        })\n}\n\nexport const followUser = (userID: number) => (dispatch: Dispatch) => {\n    dispatch(toggleIsFollowing(true, userID))\n    usersAPI.followUser(userID)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(follow(userID))\n            }\n            dispatch(toggleIsFollowing(false, userID))\n        })\n}\n\nexport const unfollowUser = (userID: number) => (dispatch: Dispatch) => {\n    dispatch(toggleIsFollowing(true, userID))\n    usersAPI.unfollowUser(userID)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(unfollow(userID))\n            }\n            dispatch(toggleIsFollowing(false, userID))\n        })\n}\n\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const authAPI = {\n    authMe() {\n        return instance.get<GetAuth>('auth/me')\n    }\n}\n\ntype GetAuth = {\n    data: {\n        login: string\n        id: number\n        email: string\n    }\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    resultCode: number\n}","import {Dispatch} from \"redux\";\nimport { authAPI } from \"../api/auth-api\";\n\ntype AuthType = {\n    data: DataType\n    messages: Array<string>\n    fieldsErrors: Array<any>\n    resultCode: number\n    isAuth: boolean\n}\n\ntype DataType = {\n    id: number\n    login: string\n    email: string\n}\nconst initialState: AuthType = {\n    data: {\n        id: 20566,\n        login: \"itsidorkin\",\n        email: \"itsidorkin28@gmail.com\",\n    },\n    messages: [],\n    fieldsErrors: [],\n    resultCode: 0,\n    isAuth: false,\n}\n\n\nexport const authReducer = (state = initialState, action: AuthActionsTypes): AuthType => {\n    switch (action.type) {\n        case 'SET-AUTH-USER-DATA':\n            return {...state, ...action.data, isAuth: true}\n        default:\n            return state\n    }\n}\n\nexport type AuthActionsTypes = SetUserDataType\n\ntype SetUserDataType = ReturnType<typeof setAuthUserData>\nexport const setAuthUserData = (id: number, login: string, email: string) => {\n    return {\n        type: 'SET-AUTH-USER-DATA',\n        data: {id, login, email}\n    } as const\n}\n\nexport const getAuthUserData = (dispatch: Dispatch) => {\n    authAPI.authMe()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                let {id, login, email} = response.data.data\n                dispatch(setAuthUserData(id, login, email))\n            }\n        })\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {usersReducer} from \"./users-reducer\";\nimport {authReducer} from \"./auth-reducer\";\nimport thunkMiddleware from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n})\n\nexport type RootStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n//@ts-ignore\nconsole.log(window.store = store)\n\n\n","import s from './Navbar.module.scss'\nimport React from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nexport function Navbar() {\n    return (\n        <nav className={s.navbar}>\n            <div>\n               <NavLink to='/profile' className={({ isActive }) => isActive ? s.active : ''}>\n                   Profile\n               </NavLink>\n            </div>\n            <div>\n                <NavLink to='/dialogs' className={({ isActive }) => isActive ? s.active : ''}>\n                    Messages\n                </NavLink>\n            </div>\n            <div>\n                <NavLink to='/users' className={({ isActive }) => isActive ? s.active : ''}>\n                    Find Users\n                </NavLink>\n            </div>\n        </nav>\n    )\n}","import s from \"./DialogItem.module.scss\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\n\nexport type DialogItemType = {\n    id: string\n    name: string\n}\nexport const DialogItem = ({id, name}: DialogItemType) => {\n    let path = `/dialogs/${id}`\n\n    return (\n        <div className={s.dialogItem}>\n            <NavLink to={path} className={({ isActive }) => isActive ? s.active : ''}>{name}</NavLink>\n        </div>\n    )\n}","import s from \"./Message.module.scss\";\nimport React from \"react\";\n\nexport type MessageType = {\n    id: string\n    message: string\n}\nexport const Message = ({id, message}: MessageType) => {\n    return (\n        <div className={s.message}>\n            {message}\n        </div>\n    )\n}","import React, {ChangeEvent, KeyboardEvent, useCallback} from 'react'\nimport s from './Dialogs.module.scss'\nimport {DialogItem, DialogItemType} from \"./DialogItem/DialogItem\";\nimport {Message, MessageType} from \"./Message/Message\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport {useDispatch} from \"react-redux\";\nimport { changeMessage, sendMessage } from '../../redux/dialogs-reducer';\n\ntype DialogsType = {\n    dialogs: Array<DialogItemType>\n    messages: Array<MessageType>\n    messageText: string\n}\n\nexport const Dialogs = ({dialogs, messages, messageText}: DialogsType) => {\n    const dispatch = useDispatch()\n    const dialogsElements = dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\n    const messagesElements = messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\n\n    const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changeMessage(e.currentTarget.value))\n    };\n\n    const sendMessageHandler = useCallback(() => {\n        const newMessage = messageText.trim()\n        if (newMessage) {\n            dispatch(sendMessage(newMessage))\n        }\n    }, [dispatch, messageText])\n    const keyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.ctrlKey && e.key === 'Enter') {\n            sendMessageHandler()\n        }\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messagesItems}>\n                {messagesElements}\n                <div>\n                    <Box\n                        component=\"form\"\n                        sx={{\n                            '& .MuiTextField-root': {mb: 1, width: '100%'},\n                        }}\n                        noValidate\n                        autoComplete=\"off\">\n                        <TextField\n                            id=\"outlined-multiline-flexible\"\n                            label=\"Type message\"\n                            multiline\n                            maxRows={4}\n                            value={messageText}\n                            onChange={changeHandler}\n                            onKeyPress={keyPressHandler}/>\n\n                    </Box>\n                    <Stack direction=\"row\" spacing={1}>\n                        <Button variant=\"contained\" endIcon={<SendIcon/>} onClick={sendMessageHandler}>\n                            Send\n                        </Button>\n                    </Stack>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, {ComponentType} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../redux/redux-store\";\nimport {Navigate} from \"react-router-dom\";\n\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    function RedirectComponent(props: T) {\n        const isAuth = useSelector<RootStateType, boolean>(state => state.auth.isAuth)\n        if (!isAuth) return <Navigate to={\"/login\"}/>\n        return <Component {...props}/>\n    }\n\n    return RedirectComponent\n}\n\n\n","import React, {ComponentType} from 'react'\nimport {useSelector} from 'react-redux';\nimport { RootStateType } from '../../redux/redux-store';\nimport {Dialogs} from \"./Dialogs\";\nimport {DialogItemType} from \"./DialogItem/DialogItem\";\nimport {MessageType} from \"./Message/Message\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nconst DialogsContainer = withAuthRedirect(() => {\n    const dialogs = useSelector<RootStateType, Array<DialogItemType>>(state => state.dialogsPage.dialogs)\n    const messages = useSelector<RootStateType, Array<MessageType>>(state => state.dialogsPage.messages)\n    const messageText = useSelector<RootStateType, string>(state => state.dialogsPage.messageText)\n    return <Dialogs dialogs={dialogs} messages={messages} messageText={messageText}/>\n})\n\nexport default compose<ComponentType>(withAuthRedirect)(DialogsContainer)","import React from 'react';\nimport {Avatar, Button} from \"@mui/material\";\nimport s from \"./Users.module.scss\";\nimport {UserType} from \"../../redux/users-reducer\";\nimport {NavLink} from 'react-router-dom';\n\ntype UsersType = {\n    usersList: Array<UserType>\n    isFollowing: Array<number>\n    followUserHandler: (userID: number) => void\n    unfollowUserHandler: (userID: number) => void\n}\n\nexport const Users = React.memo(({usersList, isFollowing, followUserHandler, unfollowUserHandler}: UsersType) => {\n    return <div>\n        <div className={s.users}>\n            {usersList.map(u => {\n                return (\n                    <div key={u.id} className={s.user}>\n                        <div>\n                            <NavLink to={'/profile/' + u.id}>\n                                <Avatar alt={u.name} src={u.photos?.small} sx={{width: 100, height: 100}}/>\n                            </NavLink>\n                        </div>\n                        <div>\n                            {u.followed\n                                ? <Button onClick={() => unfollowUserHandler(u.id)}\n                                          variant=\"contained\"\n                                          color=\"error\"\n                                          size='small'\n                                          disabled={isFollowing.some(id => id === u.id)}>Unfollow</Button>\n                                : <Button onClick={() => followUserHandler(u.id)}\n                                          variant=\"contained\"\n                                          color=\"success\"\n                                          size='small'\n                                          disabled={isFollowing.some(id => id === u.id)}>Follow</Button>}\n                        </div>\n                        <span>{u.name}</span>\n                        <span>{u.status}</span>\n                    </div>\n                )\n            })}\n        </div>\n    </div>\n})\n\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../redux/redux-store\";\nimport {followUser, getUsers, unfollowUser, UserType} from \"../../redux/users-reducer\";\nimport React, {ComponentType, useCallback, useEffect} from \"react\";\nimport {Users} from \"./Users\";\nimport {CircularProgress, Pagination} from \"@mui/material\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\n\nconst UsersContainer = withAuthRedirect(() => {\n    const dispatch = useDispatch()\n    const isFetching = useSelector<RootStateType, boolean>(state => state.usersPage.isFetching)\n    const isFollowing = useSelector<RootStateType, Array<number>>(state => state.usersPage.isFollowing)\n    const usersList = useSelector<RootStateType, Array<UserType>>(state => state.usersPage.usersList)\n    const pageSize = useSelector<RootStateType, number>(state => state.usersPage.pageSize)\n    const totalUsersCount = useSelector<RootStateType, number>(state => state.usersPage.totalUsersCount)\n    const currentPage = useSelector<RootStateType, number>(state => state.usersPage.currentPage)\n\n    useEffect(() => {\n        dispatch(getUsers(currentPage, pageSize))\n    }, [dispatch, currentPage, pageSize])\n\n    const changeCurrentPage = useCallback((currentPage: number) => {\n        dispatch(getUsers(currentPage, pageSize))\n    }, [dispatch, pageSize])\n\n    const followUserHandler = useCallback((userID: number) => {\n        dispatch(followUser(userID))\n    }, [dispatch])\n\n    const unfollowUserHandler = useCallback((userID: number) => {\n        dispatch(unfollowUser(userID))\n    }, [dispatch])\n\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\n\n    return <div style={{display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center'}}>\n        <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n        }}>\n            <Pagination count={pagesCount} color=\"primary\" onChange={(e, value) => changeCurrentPage(value)}/>\n        </div>\n        {isFetching ? <CircularProgress style={{marginTop: '30px', marginBottom: '20px'}}/> :\n            <Users usersList={usersList}\n                   isFollowing={isFollowing}\n                   followUserHandler={followUserHandler}\n                   unfollowUserHandler={unfollowUserHandler}/>}\n    </div>\n\n})\n\nexport default compose<ComponentType>(withAuthRedirect)(UsersContainer)\n\n","import React from \"react\";\nimport s from './UserDescription.module.scss'\nimport {UserDescriptionType} from \"../../../redux/profile-reducer\";\nimport {Avatar} from \"@mui/material\";\n\ntype UserDescriptionPropsType = {\n    profile: UserDescriptionType\n}\n\nexport const UserDescription = ({profile}: UserDescriptionPropsType) => {\n    return (\n        <div className={s.userDescription}>\n            <h3>{profile.fullName}</h3>\n            <Avatar alt={profile.fullName} src={profile.photos?.large} sx={{width: 150, height: 150}} style={{marginBottom: '15px'}}/>\n            <span>{profile.aboutMe}</span>\n        </div>\n    )\n}\n\n","import { Avatar } from '@mui/material'\nimport s from './Post.module.scss'\n\nexport type PostType = {\n    id: string\n    post: string\n    likesCount: number\n}\n\nfunction Post(props: PostType) {\n    return (\n        <div className={s.post}>\n                    <Avatar src=\"\" sx={{width: 50, height: 50}}/>\n                    <span>{props.post}</span>\n                    <span>Likes: {props.likesCount}</span>\n        </div>\n    )\n}\n\nexport default Post","import Post from \"./Post/Post\";\nimport s from './MyPosts.module.scss'\nimport {KeyboardEvent, ChangeEvent, useCallback} from \"react\";\nimport TextField from '@mui/material/TextField';\nimport React from \"react\";\nimport {addPost, changePost, ProfilePageType} from \"../../../redux/profile-reducer\";\nimport { IconButton } from \"@mui/material\";\nimport { PostAdd } from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\n\ntype MyPostType = {\n    profilePage: ProfilePageType\n}\n\nexport const MyPosts = ({profilePage}: MyPostType) => {\n    const dispatch = useDispatch()\n    const postsElements = profilePage.posts.map(m => <Post key={m.id} id={m.id} post={m.post}\n                                                                 likesCount={m.likesCount}/>)\n    const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changePost(e.currentTarget.value))\n    };\n\n    const addPostHandler = useCallback(() => {\n        const newPost = profilePage.postText.trim()\n        if (newPost) {\n            dispatch(addPost(newPost))\n        }\n    }, [dispatch, profilePage.postText])\n    const keyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.ctrlKey && e.key === 'Enter') {\n            addPostHandler()\n        }\n    }\n    return (\n        <div className={s.myPosts}>\n            <h3>All posts</h3>\n            <div className={s.postForm}>\n                <TextField\n                    id=\"outlined-multiline-flexible\"\n                    label=\"What's new?\"\n                    multiline\n                    maxRows={4}\n                    value={profilePage.postText}\n                    onChange={changeHandler}\n                    onKeyPress={keyPressHandler}/>\n                <IconButton onClick={addPostHandler} style={{marginLeft: '5px'}}>\n                    <PostAdd color=\"primary\"/>\n                </IconButton>\n            </div>\n            {postsElements}\n        </div>\n    )\n}","import {useSelector} from \"react-redux\";\nimport React from 'react'\nimport {ProfilePageType} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {RootStateType} from \"../../../redux/redux-store\";\n\n\n\nexport const MyPostsContainer = React.memo(() => {\n    const profilePage = useSelector<RootStateType, ProfilePageType>(state => state.profilePage)\n    return <MyPosts profilePage={profilePage}/>\n})\n\n","import s from './Profile.module.scss'\nimport React from \"react\";\nimport {UserDescription} from './UserDescription/UserDescription';\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\nimport {UserDescriptionType} from \"../../redux/profile-reducer\";\n\n\ntype ProfileType = {\n    profile: UserDescriptionType\n}\n\nexport const Profile = React.memo(({profile}: ProfileType) => {\n    return <div className={s.profile}>\n        <UserDescription profile={profile}/>\n        <MyPostsContainer/>\n    </div>\n})","import s from './Profile.module.scss'\nimport React, {ComponentType, useEffect} from \"react\";\nimport {Profile} from './Profile';\nimport {setUserProfileThunk, UserDescriptionType} from \"../../redux/profile-reducer\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {RootStateType} from \"../../redux/redux-store\";\nimport {useParams} from 'react-router-dom';\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nconst ProfileContainer = withAuthRedirect(() => {\n    const dispatch = useDispatch()\n    const profile = useSelector<RootStateType, UserDescriptionType>(state => state.profilePage.profile)\n    let {userId} = useParams()\n\n    if(!userId){\n        userId = '2';\n    }\n\n\n    useEffect(() => {\n       dispatch(setUserProfileThunk(userId))\n    }, [dispatch, userId])\n\n    return (\n        <div className={s.profile}>\n            <Profile profile={profile}/>\n        </div>\n    )\n\n})\n\nexport default compose<ComponentType>(withAuthRedirect)(ProfileContainer)\n\n\n","import React from 'react';\nimport s from './Login.module.scss'\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../redux/redux-store\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const Login = React.memo(() => {\n    const isAuth = useSelector<RootStateType, boolean>(state => state.auth.isAuth)\n    if (isAuth) return <Navigate to={\"/profile\"}/>\n    return (\n        <div className={s.login}>\n            <h1>Login</h1>\n        </div>\n    )\n})\n\n\n","import React from 'react';\nimport {Route, Routes} from 'react-router-dom';\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport { Login } from './components/Login/Login';\n\nexport const AppRoutes = () => {\n\n    return (\n        <main>\n            <Routes>\n                <Route path=\"profile\" element={<ProfileContainer />}>\n                    <Route path=\":userId\" element={<ProfileContainer />} />\n                </Route>\n                <Route path={'dialogs'}\n                       element={<DialogsContainer/>}/>\n                <Route path={'users'}\n                       element={<UsersContainer/>}/>\n                <Route path={'login'}\n                       element={<Login/>}/>\n                <Route\n                    path=\"*\"\n                    element={\n                        <div>\n                            <p>404 error</p>\n                        </div>\n                    }\n                />\n            </Routes>\n        </main>\n    );\n};\n\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\ntype HeaderType = {\n    isAuth: boolean\n    login: string\n}\n\nexport const Header = React.memo(({isAuth, login}: HeaderType) => {\n    return (\n        <header>\n            <Box sx={{ flexGrow: 1, mb: 2 }}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                            SOCIAL NETWORK\n                        </Typography>\n                        {isAuth ? login : <Button color=\"inherit\">Login</Button>}\n                    </Toolbar>\n                </AppBar>\n            </Box>\n        </header>\n    )\n})","import * as React from 'react';\nimport {Header} from \"./Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {RootStateType} from \"../../redux/redux-store\";\nimport {getAuthUserData} from \"../../redux/auth-reducer\";\n\n\nexport const HeaderContainer = React.memo(() => {\n    const isAuth = useSelector<RootStateType, boolean>(state => state.auth.isAuth)\n    const login = useSelector<RootStateType, string>(state => state.auth.data.login)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getAuthUserData)\n    }, [dispatch])\n    return <Header isAuth={isAuth} login={login}/>\n})\n","import React from 'react'\nimport './App.module.scss'\nimport s from './App.module.scss'\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport Paper from '@mui/material/Paper';\nimport {AppRoutes} from \"./AppRoutes\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\n\n\nexport const App = () => {\n\n    return (\n        <div className={s.app}>\n            <HeaderContainer/>\n\n            <Navbar/>\n\n            <Paper style={{padding: '15px 15px'}}>\n                <AppRoutes/>\n            </Paper>\n\n\n        </div>\n    );\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport './index.scss'\nimport {store} from \"./redux/redux-store\";\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport {App} from './App'\nimport reportWebVitals from './reportWebVitals'\nimport {BrowserRouter} from \"react-router-dom\"\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__10UeP\",\"active\":\"Navbar_active__21R_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__15I9R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Gkkf\",\"dialogsItems\":\"Dialogs_dialogsItems__2PZ9i\",\"messagesItems\":\"Dialogs_messagesItems__3JX3o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__1nzJQ\",\"active\":\"DialogItem_active__JdILs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__3CRqz\",\"user\":\"Users_user__1d1r4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2AZpm\",\"postForm\":\"MyPosts_postForm__1ywSN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__27Afv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userDescription\":\"UserDescription_userDescription__37qmJ\"};"],"sourceRoot":""}