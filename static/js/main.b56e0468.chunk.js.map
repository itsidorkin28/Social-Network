{"version":3,"sources":["features/Login/Login.module.scss","features/Profile/MyPosts/MyPosts.module.scss","features/Profile/Profile.module.scss","features/Profile/UserDescription/UserDescription.module.scss","features/Profile/MyPosts/Post/Post.module.scss","api/profile-api.ts","features/Profile/profile-reducer.ts","api/users-api.ts","features/Users/users-reducer.ts","api/auth-api.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","app/redux-store.ts","features/Header/Header.tsx","features/Users/User/User.tsx","features/Users/UsersSearchForm.tsx","features/Users/Users.tsx","features/Login/Login.tsx","features/Navbar/Navbar.tsx","features/Profile/UserDescription/ProfileStatus/ProfileStatus.tsx","features/Profile/UserDescription/UserDescription.tsx","features/Profile/MyPosts/Post/Post.tsx","features/Profile/MyPosts/MyPostsForm/MyPostsForm.tsx","features/Profile/MyPosts/MyPosts.tsx","features/Profile/Profile.tsx","features/Main/Main.tsx","app/App.tsx","reportWebVitals.ts","index.tsx","features/Profile/UserDescription/ProfileStatus/ProfileStatus.module.scss","features/Navbar/Navbar.module.scss","features/Users/User/User.module.scss"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","profileAPI","paramsUserID","get","userId","status","put","initialState","posts","id","v1","post","likesCount","profile","setStatusProfile","type","usersAPI","currentPage","pageSize","filter","term","friend","then","response","data","userID","delete","usersList","totalUsersCount","isFetching","isFollowing","disableButton","setFilter","payload","toggleIsFollowing","toggleIsFetching","getUsersTC","page","dispatch","a","res","users","items","totalCount","authAPI","email","password","rememberMe","login","messages","fieldsErrors","resultCode","isAuth","setAuthUserData","getAuthUserDataTC","appStatus","changeAppStatus","rootReducer","combineReducers","profilePage","state","action","newPost","postText","usersPage","map","u","followed","auth","app","store","createStore","applyMiddleware","thunkMiddleware","console","log","window","Header","React","useDispatch","useSelector","logoutHandler","Box","sx","flexGrow","mb","AppBar","position","Toolbar","Typography","variant","component","Button","color","onClick","LinearProgress","User","memo","followUserHandler","unfollowUserHandler","mappedUsers","className","s","user","to","Avatar","alt","name","src","photos","small","width","height","size","disabled","some","validationSchema","Yup","max","UsersSearchForm","onFilterChanged","initialValues","onSubmit","values","setSubmitting","isSubmitting","as","value","Users","useEffect","changeCurrentPage","useCallback","followUserTC","unfollowUserTC","pagesCount","Math","ceil","style","display","justifyContent","flexDirection","alignItems","CircularProgress","marginTop","marginBottom","Pagination","count","onChange","e","replace","required","min","matches","LoginForm","loginHandler","loginTC","loginForm","placeholder","htmlFor","Login","Navbar","navbar","isActive","active","ProfileStatus","useState","editMode","setEditMode","localStatus","setLocalStatus","offEditMode","updateStatusProfileTC","trim","profileStatus","input","TextField","currentTarget","autoFocus","onFocus","event","select","onBlur","onKeyPress","key","span","noStatus","UserDescription","userDescription","fullName","large","aboutMe","Post","props","MyPostsForm","addPostHandler","IconButton","marginLeft","PostAdd","MyPosts","postsElements","m","myPosts","postForm","Profile","authUserId","useParams","setStatusProfileTC","Main","path","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b56e0468.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Login_loginForm__2A6xe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2o7U5\",\"postForm\":\"MyPosts_postForm__amRnx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2bhSD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userDescription\":\"UserDescription_userDescription__3kaOU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__2prcS\"};","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const profileAPI = {\n    getProfile(paramsUserID: string | undefined) {\n        return instance.get<ProfileType>(`profile/${paramsUserID}`)\n    },\n    getStatus(userId: string | undefined) {\n        return instance.get<string>(`profile/status/${userId}`)\n    },\n    updateStatus(status: string) {\n        return instance.put<UpdateStatusType>(`profile/status`, {status})\n    }\n\n}\n\ntype UpdateStatusType = {\n    data: {}\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    resultCode: number\n}\n\nexport type ProfileType = {\n    aboutMe: string\n    contacts: {\n        facebook: string\n        website: string\n        vk: string\n        twitter: string\n        instagram: string\n        youtube: string\n        github: string\n        mainLink: string\n    },\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    userId: number\n    photos: {\n        small: string\n        large: string\n    }\n}","import {PostType} from \"./MyPosts/Post/Post\";\nimport {v1} from \"uuid\";\nimport {profileAPI, ProfileType} from \"../../api/profile-api\";\nimport {ThunkType} from \"../../app/redux-store\";\n\n\nexport type ProfileDomainType = {\n    profile: ProfileType | null\n    posts: Array<PostType>\n    status: string\n}\n\nconst initialState: ProfileDomainType = {\n    posts: [\n        {id: v1(), post: 'Hello!', likesCount: 3},\n        {id: v1(), post: 'JS!', likesCount: 9}\n    ],\n    profile: null,\n    status: '',\n}\n\n\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileDomainType => {\n    switch (action.type) {\n        case 'ADD-POST':\n            const newPost: PostType = {id: action.id, post: action.postText, likesCount: 0}\n            return {...state, posts: [newPost, ...state.posts]}\n        case 'SET-USER-PROFILE':\n            return {...state, profile: action.profile}\n        case \"SET-STATUS-PROFILE\":\n            return {...state, status: action.status}\n        default:\n            return state\n    }\n}\n\n\n// AC\n\nexport type ProfileActionsType =\n    ReturnType<typeof addPost>\n    | ReturnType<typeof setUserProfile>\n    | ReturnType<typeof setStatusProfile>\n\nexport const setStatusProfile = (status: string) => {\n    return {type: 'SET-STATUS-PROFILE', status} as const\n}\nexport const setUserProfile = (profile: ProfileType) => {\n    return {type: 'SET-USER-PROFILE', profile} as const\n}\nexport const addPost = (postText: string) => {\n    return {type: 'ADD-POST', postText, id: v1()} as const\n}\n\n// Thunk\n\nexport const setUserProfileTC = (paramsUserID: string | undefined): ThunkType => async dispatch => {\n    const res = await profileAPI.getProfile(paramsUserID)\n    dispatch(setUserProfile(res.data))\n}\nexport const setStatusProfileTC = (paramsUserID: string | undefined): ThunkType => async dispatch => {\n    const res = await profileAPI.getStatus(paramsUserID)\n    dispatch(setStatusProfile(res.data))\n}\nexport const updateStatusProfileTC = (status: string): ThunkType => async dispatch => {\n    const res = await profileAPI.updateStatus(status)\n    if (res.data.resultCode === 0) {\n        dispatch(setStatusProfile(status))\n    }\n}","import axios from \"axios\";\nimport { FilterType } from \"../features/Users/users-reducer\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: number = 1, pageSize: number = 10, filter: FilterType = {term: '', friend: null}) {\n        return instance.get<GetUserType>(`users?page=${currentPage}&count=${pageSize}&term=${filter.term}`\n            + (filter.friend === null ? '' : `&friend=${filter.friend}`))\n            .then(response => {\n                return response.data\n            })\n    },\n    followUser(userID: number) {\n        return instance.post<PostAndDeleteFollowType>(`follow/${userID}`)\n    },\n    unfollowUser(userID: number) {\n        return instance.delete<PostAndDeleteFollowType>(`follow/${userID}`)\n    },\n}\n\ntype PostAndDeleteFollowType = {\n    data: {},\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    resultCode: number\n}\n\nexport type UserType = {\n    name: string\n    id: number\n    uniqueUrlName: string\n    photos: {\n        small: string\n        large: string\n    }\n    status: string\n    followed: boolean\n}\n\ntype GetUserType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string\n}\n\n\n","import {usersAPI, UserType} from \"../../api/users-api\";\nimport {ThunkType} from \"../../app/redux-store\";\n\nexport type UsersDomainType = {\n    usersList: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    isFollowing: Array<number>\n    disableButton: boolean\n    filter: {\n        term: string,\n        friend: null | boolean\n\n    }\n}\n\nexport type FilterType = typeof initialState.filter\n\nconst initialState: UsersDomainType = {\n    usersList: [],\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    isFollowing: [],\n    disableButton: false,\n    filter: {\n        term: '',\n        friend: null\n    }\n}\n\nexport const usersReducer = (state = initialState, action: UsersActionsType): UsersDomainType => {\n    switch (action.type) {\n        case 'FOLLOW':\n            return {...state, usersList: state.usersList.map(u => u.id === action.id ? {...u, followed: true} : u)}\n        case 'UNFOLLOW':\n            return {...state, usersList: state.usersList.map(u => u.id === action.id ? {...u, followed: false} : u)}\n        case 'SET-USERS':\n            return {...state, usersList: action.users}\n        case 'SET-CURRENT-PAGE':\n            return {...state, currentPage: action.currentPage}\n        case 'SET-TOTAL-USERS-COUNT':\n            return {...state, totalUsersCount: action.totalUsersCount}\n        case 'TOGGLE_IS_FETCHING':\n            return {...state, isFetching: action.isFetching}\n        case 'TOGGLE_IS_FOLLOWING':\n            return {\n                ...state,\n                isFollowing: action.disableButton\n                    ? [...state.isFollowing, action.userID]\n                    : [...state.isFollowing.filter(id => id !== action.userID)]\n            }\n        case 'USERS/SET_FILTER':\n            return {...state, filter: action.payload}\n        default:\n            return state\n    }\n}\n\n// AC\n\nexport type UsersActionsType =\n    ReturnType<typeof follow>\n    | ReturnType<typeof unfollow>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount>\n    | ReturnType<typeof toggleIsFetching>\n    | ReturnType<typeof toggleIsFollowing>\n    | ReturnType<typeof setFilter>\n\nexport const setFilter = (filter: FilterType) => {\n    return {type: 'USERS/SET_FILTER', payload: filter} as const\n}\nexport const toggleIsFollowing = (disableButton: boolean, userID: number) => {\n    return {type: 'TOGGLE_IS_FOLLOWING', disableButton, userID} as const\n}\nexport const toggleIsFetching = (isFetching: boolean) => {\n    return {type: 'TOGGLE_IS_FETCHING', isFetching} as const\n}\nexport const follow = (id: number) => {\n    return {type: 'FOLLOW', id} as const\n}\nexport const unfollow = (id: number) => {\n    return {type: 'UNFOLLOW', id} as const\n}\nexport const setUsers = (users: Array<UserType>) => {\n    return {type: 'SET-USERS', users} as const\n}\nexport const setCurrentPage = (currentPage: number) => {\n    return {type: 'SET-CURRENT-PAGE', currentPage} as const\n}\nexport const setTotalUsersCount = (totalUsersCount: number) => {\n    return {type: 'SET-TOTAL-USERS-COUNT', totalUsersCount} as const\n}\n\n// Thunk\n\nexport const getUsersTC = (page: number, pageSize: number, filter: FilterType): ThunkType => async dispatch => {\n    dispatch(toggleIsFetching(true))\n    dispatch(setFilter(filter))\n    dispatch(setCurrentPage(page))\n    const res = await usersAPI.getUsers(page, pageSize, filter)\n    dispatch(toggleIsFetching(false))\n    dispatch(setUsers(res.items))\n    dispatch(setTotalUsersCount(res.totalCount))\n}\nexport const followUserTC = (userID: number): ThunkType => async dispatch => {\n    dispatch(toggleIsFollowing(true, userID))\n    const res = await usersAPI.followUser(userID)\n    if (res.data.resultCode === 0) {\n        dispatch(follow(userID))\n    }\n    dispatch(toggleIsFollowing(false, userID))\n}\nexport const unfollowUserTC = (userID: number): ThunkType => async dispatch => {\n    dispatch(toggleIsFollowing(true, userID))\n    const res = await usersAPI.unfollowUser(userID)\n    if (res.data.resultCode === 0) {\n        dispatch(unfollow(userID))\n    }\n    dispatch(toggleIsFollowing(false, userID))\n}\n\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const authAPI = {\n    authMe() {\n        return instance.get<AuthType<AuthMeData>>('auth/me')\n    },\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post<AuthType<LoginData>>('auth/login', {email, password, rememberMe})\n    },\n    logout() {\n        return instance.delete<AuthType<{}>>('auth/login')\n    }\n}\n\nexport type AuthType<T> = {\n    data: T\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    resultCode: number\n}\n\ntype LoginData = {\n    userId: number\n}\nexport type AuthMeData = {\n    id: number | null\n    login: string | null\n    email: string | null\n}","import {authAPI, AuthMeData, AuthType} from \"../../api/auth-api\";\nimport {ThunkType} from \"../../app/redux-store\";\n\n\nexport type AuthDomainType = AuthType<AuthMeData> & {\n    isAuth: boolean\n}\n\nconst initialState: AuthDomainType = {\n    data: {\n        id: null,\n        login: null,\n        email: null,\n    },\n    messages: [],\n    fieldsErrors: [],\n    resultCode: 0,\n    isAuth: false,\n}\n\n\nexport const authReducer = (state = initialState, action: AuthActionsType): AuthDomainType => {\n    switch (action.type) {\n        case 'SET-AUTH-USER-DATA':\n            return {...state, data: {...state.data, ...action.payload}, isAuth: action.isAuth}\n        default:\n            return state\n    }\n}\n\n// AC\n\nexport type AuthActionsType = ReturnType<typeof setAuthUserData>\n\nexport const setAuthUserData = (id: number | null, login: string | null, email: string | null, isAuth: boolean) => {\n    return {\n        type: 'SET-AUTH-USER-DATA',\n        payload: {id, login, email},\n        isAuth\n    } as const\n}\n\n// Thunk\n\nexport const getAuthUserDataTC = (): ThunkType => async dispatch => {\n    const res = await authAPI.authMe()\n    if (res.data.resultCode === 0) {\n        let {id, login, email} = res.data.data\n        dispatch(setAuthUserData(id, login, email, true))\n    }\n    return res\n}\n\nexport const loginTC = (email: string, password: string, rememberMe: boolean): ThunkType => async dispatch => {\n    const res = await authAPI.login(email, password, rememberMe)\n    if (res.data.resultCode === 0) {\n        dispatch(getAuthUserDataTC())\n    }\n}\n\nexport const logoutTC = (): ThunkType => async dispatch => {\n    const res = await authAPI.logout()\n    if (res.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false))\n    }\n}\n","import {ThunkType} from \"./redux-store\";\nimport {getAuthUserDataTC} from \"../features/Login/auth-reducer\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\n\nconst initialState = {\n    appStatus: \"idle\" as RequestStatusType,\n}\n\ntype AppInitialStateType = typeof initialState\n\nexport const appReducer = (state = initialState, action: AppReducerActionsType): AppInitialStateType => {\n    switch (action.type) {\n        case 'APP/CHANGE-APP-STATUS':\n            return {...state, appStatus: action.status}\n        default:\n            return state\n    }\n}\n\n// AC\n\nexport type AppReducerActionsType = ChangeAppStatusType\nexport type ChangeAppStatusType = ReturnType<typeof changeAppStatus>\n\nexport const changeAppStatus = (status: RequestStatusType) => {\n    return {type: 'APP/CHANGE-APP-STATUS', status} as const\n}\n\nexport const initializationAppTC = (): ThunkType => async dispatch => {\n    dispatch(changeAppStatus('loading'))\n    try {\n        await dispatch(getAuthUserDataTC())\n        dispatch(changeAppStatus('succeeded'))\n    } catch (e) {\n        dispatch(changeAppStatus('failed'))\n        console.log(e as Error)\n    }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {ProfileActionsType, profileReducer} from \"../features/Profile/profile-reducer\";\nimport {UsersActionsType, usersReducer} from \"../features/Users/users-reducer\";\nimport {AuthActionsType, authReducer} from \"../features/Login/auth-reducer\";\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\nimport {appReducer, AppReducerActionsType} from \"./app-reducer\";\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n})\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nexport type AppActionsType = UsersActionsType | ProfileActionsType | AuthActionsType | AppReducerActionsType\n\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, AppActionsType>\n\n\n//@ts-ignore\nconsole.log(window.store = store)\n\n\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logoutTC} from \"../Login/auth-reducer\";\nimport {AppStateType} from \"../../app/redux-store\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\nimport {LinearProgress} from \"@mui/material\";\n\nexport const Header = React.memo(() => {\n    const dispatch = useDispatch()\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n    const login = useSelector<AppStateType, string | null>(state => state.auth.data.login)\n    const appStatus = useSelector<AppStateType, RequestStatusType>(state => state.app.appStatus)\n    const logoutHandler = () => {\n        dispatch(logoutTC())\n    }\n    return (\n        <header>\n            <Box sx={{ flexGrow: 1, mb: 2 }}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                            SOCIAL NETWORK\n                        </Typography>\n                        {isAuth ? login : <Button color=\"inherit\">Login</Button>}\n                        {isAuth ? <Button color=\"inherit\" onClick={() => logoutHandler()}>Logout</Button> : null}\n                    </Toolbar>\n                    {appStatus === 'loading' && <LinearProgress />}\n                </AppBar>\n            </Box>\n        </header>\n    )\n})","import React from 'react';\nimport {Avatar, Button} from \"@mui/material\";\nimport s from \"./User.module.scss\";\nimport {NavLink} from 'react-router-dom';\nimport { UserType } from '../../../api/users-api';\n\ntype UsersType = {\n    usersList: Array<UserType>\n    isFollowing: Array<number>\n    followUserHandler: (userID: number) => void\n    unfollowUserHandler: (userID: number) => void\n}\n\nexport const User = React.memo(({usersList, isFollowing, followUserHandler, unfollowUserHandler}: UsersType) => {\n    const mappedUsers = usersList.map(u => {\n        return (\n            <div key={u.id} className={s.user}>\n                <div>\n                    <NavLink to={'/profile/' + u.id}>\n                        <Avatar alt={u.name} src={u.photos?.small} sx={{width: 100, height: 100}}/>\n                    </NavLink>\n                </div>\n                <div>\n                    {u.followed\n                        ? <Button onClick={() => unfollowUserHandler(u.id)}\n                                  variant=\"contained\"\n                                  color=\"error\"\n                                  size='small'\n                                  disabled={isFollowing.some(id => id === u.id)}>Unfollow</Button>\n                        : <Button onClick={() => followUserHandler(u.id)}\n                                  variant=\"contained\"\n                                  color=\"success\"\n                                  size='small'\n                                  disabled={isFollowing.some(id => id === u.id)}>Follow</Button>}\n                </div>\n                <span>{u.name}</span>\n                <span>{u.status}</span>\n            </div>\n        )\n    })\n\n\n\n    return <div className={s.users}>\n        {mappedUsers}\n    </div>\n})\n\n","import {Field, Form, Formik} from \"formik\";\nimport React from \"react\";\nimport {FilterType} from \"./users-reducer\";\nimport * as Yup from 'yup';\n\ntype UsersSearchFormType = {\n    onFilterChanged: (filter: FilterType) => void\n\n}\ntype FormType = {\n    term: string\n    friend: 'null' | 'true' | 'false'\n}\nconst validationSchema = Yup.object({\n    term: Yup.string()\n        .max(300, 'Must be 300 characters or less')\n})\n\nexport const UsersSearchForm = React.memo(({onFilterChanged}: UsersSearchFormType) => {\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (setSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n        onFilterChanged(filter)\n        setSubmitting(false)\n    }\n    return <div>\n        <Formik\n            initialValues={{term: '', friend: 'null'}}\n            onSubmit={submit}\n            validationSchema={validationSchema}\n        >\n            {\n                ({isSubmitting}) => (\n                    <Form>\n                        <Field name=\"term\" type=\"text\"/>\n                        <Field name=\"friend\" as=\"select\">\n                            <option value=\"null\">All</option>\n                            <option value=\"true\">Only followed</option>\n                            <option value=\"false\">Only unfollowed</option>\n                        </Field>\n                        <button type=\"submit\" disabled={isSubmitting}>Find</button>\n                    </Form>)\n            }\n        </Formik>\n    </div>\n})","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../app/redux-store\";\nimport {FilterType, followUserTC, getUsersTC, unfollowUserTC, UsersDomainType} from \"./users-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {User} from \"./User/User\";\nimport {CircularProgress, Pagination} from \"@mui/material\";\nimport {UsersSearchForm} from \"./UsersSearchForm\";\nimport { Navigate } from \"react-router-dom\";\n\n\nexport const Users = React.memo(() => {\n    const dispatch = useDispatch()\n    const usersPage = useSelector<AppStateType, UsersDomainType>(state => state.usersPage)\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(getUsersTC(1, usersPage.pageSize, filter))\n    }\n\n    useEffect(() => {\n        dispatch(getUsersTC(usersPage.currentPage, usersPage.pageSize, usersPage.filter))\n    }, [dispatch, usersPage.currentPage, usersPage.pageSize, usersPage.filter])\n\n    const changeCurrentPage = useCallback((currentPage: number) => {\n        dispatch(getUsersTC(currentPage, usersPage.pageSize, usersPage.filter))\n    }, [dispatch, usersPage.pageSize, usersPage.filter])\n\n    const followUserHandler = useCallback((userID: number) => {\n        dispatch(followUserTC(userID))\n    }, [dispatch])\n\n    const unfollowUserHandler = useCallback((userID: number) => {\n        dispatch(unfollowUserTC(userID))\n    }, [dispatch])\n\n    let pagesCount = Math.ceil(usersPage.totalUsersCount / usersPage.pageSize)\n\n    return (\n        !isAuth ?\n            <Navigate replace to=\"/login\" />\n            :\n        <div style={{display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center'}}>\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        {usersPage.isFetching ? <CircularProgress style={{marginTop: '30px', marginBottom: '20px'}}/> :\n            <User usersList={usersPage.usersList}\n                  isFollowing={usersPage.isFollowing}\n                  followUserHandler={followUserHandler}\n                  unfollowUserHandler={unfollowUserHandler}/>}\n        <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n        }}>\n            <Pagination count={pagesCount} color=\"primary\" onChange={(e, value) => changeCurrentPage(value)}/>\n        </div>\n    </div>)\n\n})\n\n\n\n","import React from 'react';\nimport s from './Login.module.scss'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../app/redux-store\";\nimport {Navigate} from \"react-router-dom\";\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\nimport * as Yup from 'yup';\nimport {loginTC} from \"./auth-reducer\";\n\ntype LoginFormType = {\n    email: string,\n    password: string,\n    rememberMe: boolean\n}\n\nconst validationSchema = Yup.object({\n    email: Yup.string().email('Invalid email address').required('Required'),\n    password: Yup.string()\n        .required('No password provided')\n        .min(8, 'Password is too short - should be 8 chars minimum.')\n        .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.')\n})\n\nconst LoginForm = () => {\n    const dispatch = useDispatch()\n    const loginHandler = (email: string, password: string, rememberMe: boolean) => {\n        dispatch(loginTC(email, password, rememberMe))\n    }\n    const submit = (values: LoginFormType, {setSubmitting}: { setSubmitting: (setSubmitting: boolean) => void }) => {\n        loginHandler(values.email, values.password, values.rememberMe)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            initialValues={{email: '', password: '', rememberMe: false}}\n            validationSchema={validationSchema}\n            onSubmit={submit}\n        >\n            {\n                ({isSubmitting}) => (\n                    <Form className={s.loginForm}>\n                        <Field name=\"email\" type=\"email\" placeholder={'Email'}/>\n                        <ErrorMessage name=\"email\"/>\n\n                        <Field name=\"password\" type=\"password\" placeholder={'Password'}/>\n                        <ErrorMessage name=\"password\"/>\n\n                        <div>\n                            <Field name=\"rememberMe\" type=\"checkbox\"/>\n                            <label htmlFor=\"rememberMe\">Remember me</label>\n                        </div>\n\n                        <button type=\"submit\" disabled={isSubmitting}>Login</button>\n                    </Form>)\n            }\n        </Formik>\n    </div>\n}\n\nexport const Login = React.memo(() => {\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n    return (\n        isAuth ? <Navigate replace to=\"/profile\"/>\n            :\n            <div className={s.login}>\n                <h1>Login</h1>\n                <LoginForm/>\n            </div>\n    )\n})\n\n","import s from './Navbar.module.scss'\nimport React from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nexport function Navbar() {\n    return (\n        <nav className={s.navbar}>\n            <div>\n               <NavLink to='/profile' className={({ isActive }) => isActive ? s.active : ''}>\n                   Profile\n               </NavLink>\n            </div>\n            <div>\n                <NavLink to='/users' className={({ isActive }) => isActive ? s.active : ''}>\n                    Users\n                </NavLink>\n            </div>\n        </nav>\n    )\n}","import {TextField} from '@mui/material';\nimport React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport s from './ProfileStatus.module.scss'\nimport {updateStatusProfileTC} from \"../../profile-reducer\";\n\ntype ProfileStatusType = {\n    status: string\n}\n\nexport const ProfileStatus = React.memo(({status}: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [localStatus, setLocalStatus] = useState<string>(status)\n    const dispatch = useDispatch()\n    const onEditMode = () => {\n        setEditMode(true)\n    }\n    const offEditMode = () => {\n        setEditMode(false)\n        dispatch(updateStatusProfileTC(localStatus.trim()))\n\n    }\n\n    useEffect(() => {\n        setLocalStatus(status)\n    }, [status])\n\n    const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => event.currentTarget.select()\n\n    const updateStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setLocalStatus(e.currentTarget.value)\n    }\n\n    const keyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            offEditMode()\n        }\n    }\n\n    return (\n        <div className={s.profileStatus}>\n            {editMode && <div className={s.input}>\n                <TextField onChange={updateStatus} autoFocus onFocus={handleFocus}\n                           onBlur={offEditMode} id=\"standard-basic\" variant=\"standard\"\n                           value={localStatus} onKeyPress={keyHandler}/>\n            </div>}\n            {!editMode && <div className={s.span} onClick={onEditMode}>\n                {status ? status : <span className={s.noStatus}>type status</span>}\n            </div>}\n        </div>\n    )\n})\n\n\n","import React, { memo } from \"react\";\nimport s from './UserDescription.module.scss'\nimport {Avatar} from \"@mui/material\";\nimport { ProfileStatus } from \"./ProfileStatus/ProfileStatus\";\nimport {ProfileType} from \"../../../api/profile-api\";\n\ntype UserDescriptionPropsType = {\n    profile: ProfileType | null\n    status: string\n}\n\nexport const UserDescription = memo(({status, profile}: UserDescriptionPropsType) => {\n    return (\n        <div className={s.userDescription}>\n            <h3>{profile?.fullName}</h3>\n            <ProfileStatus status={status}/>\n            <Avatar alt={profile?.fullName} src={profile?.photos.large} sx={{width: 150, height: 150}} style={{marginBottom: '15px'}}/>\n            <span>About me: {profile?.aboutMe}</span>\n        </div>\n    )\n})\n\n","import { Avatar } from '@mui/material'\nimport s from './Post.module.scss'\n\nexport type PostType = {\n    id: string\n    post: string\n    likesCount: number\n}\n\nfunction Post(props: PostType) {\n    return (\n        <div className={s.post}>\n                    <Avatar src=\"\" sx={{width: 50, height: 50}}/>\n                    <span>{props.post}</span>\n                    <span>Likes: {props.likesCount}</span>\n        </div>\n    )\n}\n\nexport default Post","import {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport React from \"react\";\nimport {PostAdd} from \"@mui/icons-material\";\nimport {IconButton} from \"@mui/material\";\nimport * as Yup from 'yup';\n\ntype MyPostsFormType = {\n    addPostHandler: (value: string) => void\n}\n\ntype FormType = {\n    postText: string\n}\n\nconst validationSchema = Yup.object({\n    postText: Yup.string()\n        .max(300, 'Must be 300 characters or less')\n})\n\nexport const MyPostsForm = React.memo(({addPostHandler}: MyPostsFormType) => {\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (setSubmitting: boolean) => void }) => {\n        addPostHandler(values.postText)\n        setSubmitting(false)\n    }\n    return <div>\n        <Formik\n            initialValues={{postText: ''}}\n            onSubmit={submit}\n            validationSchema={validationSchema}\n        >\n            {\n                ({isSubmitting}) => (\n                    <Form>\n                        <Field component={'textarea'} name=\"postText\" type=\"text\" placeholder={'Type post'}/>\n                        <ErrorMessage name=\"postText\" />\n                        <IconButton type=\"submit\" disabled={isSubmitting} style={{marginLeft: '5px'}}>\n                            <PostAdd color=\"primary\"/>\n                        </IconButton>\n\n                    </Form>)\n            }\n        </Formik>\n    </div>\n})","import Post, {PostType} from \"./Post/Post\";\nimport s from './MyPosts.module.scss'\nimport {useCallback} from \"react\";\nimport React from \"react\";\nimport {addPost} from \"../profile-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {MyPostsForm} from \"./MyPostsForm/MyPostsForm\";\nimport {AppStateType} from \"../../../app/redux-store\";\n\n\nexport const MyPosts = React.memo(() => {\n    const dispatch = useDispatch()\n    const posts = useSelector<AppStateType, Array<PostType>>(state => state.profilePage.posts)\n    const postsElements = posts.map(m => <Post key={m.id} id={m.id} post={m.post}\n                                                                 likesCount={m.likesCount}/>)\n\n    const addPostHandler = useCallback((value: string) => {\n        const newPost = value.trim()\n        if (newPost) {\n            dispatch(addPost(newPost))\n        }\n    }, [dispatch])\n\n    return (\n        <div className={s.myPosts}>\n            <h3>All posts</h3>\n            <div className={s.postForm}>\n                <MyPostsForm addPostHandler={addPostHandler}/>\n            </div>\n            {postsElements}\n        </div>\n    )\n})","import s from './Profile.module.scss'\nimport React, {useEffect} from \"react\";\nimport {UserDescription} from './UserDescription/UserDescription';\nimport {ProfileType} from \"../../api/profile-api\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../app/redux-store\";\nimport {Navigate, useParams} from \"react-router-dom\";\nimport {setStatusProfileTC, setUserProfileTC} from \"./profile-reducer\";\nimport {MyPosts} from './MyPosts/MyPosts';\n\n\nexport const Profile = React.memo(() => {\n    const dispatch = useDispatch()\n    const profile = useSelector<AppStateType, ProfileType | null>(state => state.profilePage.profile)\n    const status = useSelector<AppStateType, string>(state => state.profilePage.status)\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n    const authUserId = useSelector<AppStateType, number | null>(state => state.auth.data.id)\n    let {userId}: any = useParams()\n\n    if (!userId) {\n        userId = authUserId;\n    }\n\n\n    useEffect(() => {\n        dispatch(setUserProfileTC(userId))\n        dispatch(setStatusProfileTC(userId))\n    }, [dispatch, userId])\n\n\n    return (\n        !isAuth ?\n            <Navigate replace to=\"/login\" />\n            :\n        <div className={s.profile}>\n            <UserDescription profile={profile} status={status}/>\n            <MyPosts/>\n        </div>\n    )\n})","import React from 'react';\nimport {Route, Routes} from \"react-router-dom\";\nimport {Users} from \"../Users/Users\";\nimport {Login} from \"../Login/Login\";\nimport { Navbar } from '../Navbar/Navbar';\nimport {Profile} from \"../Profile/Profile\";\n\ntype PropsType = {}\n\nexport const Main = React.memo(({}: PropsType) => {\n    return (\n        <main>\n            <Navbar/>\n\n            <Routes>\n                <Route path=\"profile\" element={<Profile/>}>\n                    <Route path=\":userId\" element={<Profile/>}/>\n                </Route>\n                <Route path={'users'} element={<Users/>}/>\n                <Route path={'login'} element={<Login/>}/>\n                <Route path=\"*\" element={<div>404</div>}/>\n                <Route path={'social-network'} element={<Users/>}/>\n                <Route path={'/'} element={<Users/>}/>\n            </Routes>\n        </main>\n    )\n})\n\n\n","import React, {useEffect} from 'react'\nimport './App.module.scss'\nimport s from './App.module.scss'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {initializationAppTC, RequestStatusType} from \"./app-reducer\";\nimport {AppStateType} from './redux-store';\nimport {Header} from \"../features/Header/Header\";\nimport {Main} from \"../features/Main/Main\";\n\n\nexport const App = () => {\n    const dispatch = useDispatch()\n    const appStatus = useSelector<AppStateType, RequestStatusType>(state => state.app.appStatus)\n\n    useEffect(() => {\n        dispatch(initializationAppTC())\n    }, [dispatch])\n\n    return (\n        <div>\n            {appStatus === 'loading'\n                ? <></>\n                : <div className={s.app}>\n                    <Header/>\n                    <Main/>\n                </div>}\n        </div>\n    );\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport './index.scss'\nimport {store} from \"./app/redux-store\";\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport {App} from './app/App'\nimport reportWebVitals from './reportWebVitals'\nimport {BrowserRouter} from \"react-router-dom\"\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatus\":\"ProfileStatus_profileStatus__3WHHK\",\"input\":\"ProfileStatus_input__1RlJU\",\"span\":\"ProfileStatus_span__1lKKs\",\"noStatus\":\"ProfileStatus_noStatus__N3sNX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__RW2mG\",\"active\":\"Navbar_active__2VJFL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"User_users__2zBa5\",\"user\":\"User_user__1zDCz\"};"],"sourceRoot":""}