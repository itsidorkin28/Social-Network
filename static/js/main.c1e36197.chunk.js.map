{"version":3,"sources":["components/Profile/UserDescription/UserDescription.module.scss","components/Profile/MyPosts/Post/Post.module.scss","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/api.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Profile/UserDescription/UserDescription.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","AppRoutes.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Navbar/Navbar.module.scss","components/Profile/Profile.module.scss","components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogItem/DialogItem.module.scss","components/Users/Users.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Dialogs/Message/Message.module.scss"],"names":["module","exports","initialState","posts","id","v1","post","likesCount","postText","profile","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","userId","photos","small","large","dialogs","name","messages","message","messageText","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userID","delete","usersList","totalUsersCount","isFetching","isFollowing","disableButton","toggleIsFollowing","type","toggleIsFetching","getUsers","dispatch","users","items","totalCount","login","email","fieldsErrors","resultCode","isAuth","rootReducer","combineReducers","profilePage","state","action","newPost","dialogsPage","newMessage","usersPage","map","u","followed","filter","auth","store","createStore","applyMiddleware","thunkMiddleware","console","log","window","Navbar","className","s","navbar","to","isActive","active","DialogItem","props","path","dialogItem","Message","DialogsContainer","connect","changeMessage","value","sendMessage","dialogsElements","d","messagesElements","m","trim","dialogsItems","messagesItems","Box","component","sx","mb","width","noValidate","autoComplete","TextField","label","multiline","maxRows","onChange","e","currentTarget","onKeyPress","ctrlKey","key","Stack","direction","spacing","Button","variant","endIcon","onClick","Users","React","memo","followUserHandler","unfollowUserHandler","user","Avatar","alt","src","height","color","size","disabled","some","status","UsersContainer","useDispatch","useSelector","useEffect","changeCurrentPage","useCallback","followUser","unfollowUser","pagesCount","Math","ceil","style","display","justifyContent","flexDirection","alignItems","Pagination","count","CircularProgress","marginTop","marginBottom","UserDescription","userDescription","Post","MyPostsContainer","changePost","addPost","postsElements","myPosts","postForm","IconButton","marginLeft","PostAdd","Profile","ProfileContainer","useParams","setUserProfile","AppRoutes","element","Header","flexGrow","AppBar","position","Toolbar","Typography","HeaderContainer","setAuthUserData","App","app","Container","fixed","maxWidth","Grid","container","item","xs","Paper","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1e36197.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userDescription\":\"UserDescription_userDescription__37qmJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1jere\"};","import {PostType} from \"../components/Profile/MyPosts/Post/Post\";\nimport {v1} from \"uuid\";\n\nexport type UserDescriptionType = {\n    aboutMe?: string\n    contacts?: {\n        facebook?: string\n        website?: string\n        vk?: string\n        twitter?: string\n        instagram?: string\n        youtube?: string\n        github?: string\n        mainLink?: string\n    },\n    lookingForAJob?: boolean\n    lookingForAJobDescription?: string\n    fullName?: string\n    userId?: number\n    photos?: {\n        small?: string\n        large?: string\n    }\n}\n\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    postText: string\n    profile: UserDescriptionType\n}\n\nconst initialState: ProfilePageType = {\n    posts: [\n        {id: v1(), post: 'Hello!', likesCount: 3},\n        {id: v1(), post: 'JS!', likesCount: 9}\n    ],\n    postText: '',\n    profile: {\n        aboutMe: \"я круто чувак 1001%\",\n        contacts: {\n            facebook: \"facebook.com\",\n            website: 'ffds',\n            vk: \"vk.com/dimych\",\n            twitter: \"https://twitter.com/@sdf\",\n            instagram: \"instagra.com/sds\",\n            youtube: 'fdsfds',\n            github: \"github.com\",\n            mainLink: 'fdsfds'\n        },\n        lookingForAJob: true,\n        lookingForAJobDescription: \"не ищу, а дурачусь\",\n        fullName: \"samurai dimych\",\n        userId: 2,\n        photos: {\n            small: \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\",\n            large: \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\n        }\n    }\n}\n\n\n\nexport const profileReducer = (state = initialState, action: ProfileActionsTypes): ProfilePageType => {\n    switch (action.type) {\n        case 'ADD-POST':\n            const newPost: PostType = {id: v1(), post: action.postText, likesCount: 0}\n            return {...state, posts: [newPost, ...state.posts], postText: ''}\n        case 'CHANGE-POST-TEXT':\n            return {...state, postText: action.postText}\n        case 'SET-USER-PROFILE':\n            return {...state, profile: action.profile}\n        default:\n            return state\n    }\n}\n\nexport type ProfileActionsTypes = AddPostType | ChangePostType | SetUserProfileType\n\ntype SetUserProfileType = ReturnType<typeof setUserProfile>\nexport const setUserProfile = (profile: UserDescriptionType) => {\n    return {\n        type: 'SET-USER-PROFILE',\n        profile\n    } as const\n}\n\ntype AddPostType = ReturnType<typeof addPost>\nexport const addPost = (postText: string) => {\n    return {\n        type: 'ADD-POST',\n        postText\n    } as const\n}\n\nexport type ChangePostType = ReturnType<typeof changePost>\nexport const changePost = (postText: string) => {\n    return {\n        type: 'CHANGE-POST-TEXT',\n        postText\n    } as const\n}","import {MessageType} from \"../components/Dialogs/Message/Message\";\nimport {v1} from \"uuid\";\nimport {DialogItemType} from \"../components/Dialogs/DialogItem/DialogItem\";\n\nexport type DialogsPageType = {\n    dialogs: Array<DialogItemType>\n    messages: Array<MessageType>\n    messageText: string\n}\nconst initialState = {\n    dialogs: [\n        {id: v1(), name: 'Alexander'},\n        {id: v1(), name: 'Alena'}\n    ],\n    messages: [\n        {id: v1(), message: 'Hello!'},\n        {id: v1(), message: 'How are you?'}\n    ],\n    messageText: ''\n}\n\nexport type DialogsActionsTypes = SendMessageACType | ChangeMessageTextACType\n\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: DialogsActionsTypes): DialogsPageType => {\n    switch (action.type) {\n        case 'SEND-MESSAGE':\n            const newMessage: MessageType = {id: v1(), message: action.messageText}\n            return {...state, messages: [...state.messages, newMessage], messageText: ''}\n        case 'CHANGE-MESSAGE-TEXT':\n            return {...state, messageText: action.messageText}\n        default:\n            return state\n    }\n}\n\ntype SendMessageACType = ReturnType<typeof sendMessageAC>\nexport const sendMessageAC = (messageText: string) => {\n    return {\n        type: 'SEND-MESSAGE',\n        messageText\n    } as const\n}\n\ntype ChangeMessageTextACType = ReturnType<typeof changeMessageAC>\nexport const changeMessageAC = (messageText: string) => {\n    return {\n        type: 'CHANGE-MESSAGE-TEXT',\n        messageText\n    } as const\n}","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n    followUser(userID: number) {\n        return instance.post(`follow/${userID}`, {}, {})\n    },\n    unfollowUser(userID: number) {\n        return instance.delete(`follow/${userID}`, {},)\n    },\n}\n","import {Dispatch} from \"redux\"\nimport {usersAPI} from \"../api/api\";\n\nexport type UserType = {\n    name: string\n    id: number\n    uniqueUrlName?: string\n    photos?: {\n        small?: string\n        large?: string\n    }\n    status?: string\n    followed: boolean\n}\n\nexport type UsersPageType = {\n    usersList: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    isFollowing: Array<number>\n    disableButton: boolean\n}\n\nconst initialState: UsersPageType = {\n    usersList: [],\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    isFollowing: [],\n    disableButton: false,\n}\n\nexport const usersReducer = (state = initialState, action: UsersActionsTypes): UsersPageType => {\n    switch (action.type) {\n        case 'FOLLOW':\n            return {...state, usersList: state.usersList.map(u => u.id === action.id ? {...u, followed: true} : u)}\n        case 'UNFOLLOW':\n            return {...state, usersList: state.usersList.map(u => u.id === action.id ? {...u, followed: false} : u)}\n        case 'SET-USERS':\n            return {...state, usersList: action.users}\n        case 'SET-CURRENT-PAGE':\n            return {...state, currentPage: action.currentPage}\n        case 'SET-TOTAL-USERS-COUNT':\n            return {...state, totalUsersCount: action.totalUsersCount}\n        case 'TOGGLE_IS_FETCHING':\n            return {...state, isFetching: action.isFetching}\n        case 'TOGGLE_IS_FOLLOWING':\n            return {\n                ...state,\n                isFollowing: action.disableButton\n                    ? [...state.isFollowing, action.userID]\n                    : [...state.isFollowing.filter(id => id !== action.userID)]\n            }\n        default:\n            return state\n    }\n}\n\nexport type UsersActionsTypes =\n    FollowType\n    | UnfollowType\n    | SetUsersType\n    | SetCurrentPageType\n    | SetTotalUsersCountType\n    | ToggleIsFetchingType\n    | ToggleIsFollowingType\n\ntype ToggleIsFollowingType = ReturnType<typeof toggleIsFollowing>\nexport const toggleIsFollowing = (disableButton: boolean, userID: number) => {\n    return {\n        type: 'TOGGLE_IS_FOLLOWING',\n        disableButton,\n        userID,\n    } as const\n}\n\ntype ToggleIsFetchingType = ReturnType<typeof toggleIsFetching>\nexport const toggleIsFetching = (isFetching: boolean) => {\n    return {\n        type: 'TOGGLE_IS_FETCHING',\n        isFetching,\n    } as const\n}\n\ntype FollowType = ReturnType<typeof follow>\nexport const follow = (id: number) => {\n    return {\n        type: 'FOLLOW',\n        id,\n    } as const\n}\n\ntype UnfollowType = ReturnType<typeof unfollow>\nexport const unfollow = (id: number) => {\n    return {\n        type: 'UNFOLLOW',\n        id,\n    } as const\n}\n\ntype SetUsersType = ReturnType<typeof setUsers>\nexport const setUsers = (users: Array<UserType>) => {\n    return {\n        type: 'SET-USERS',\n        users,\n    } as const\n}\n\ntype SetCurrentPageType = ReturnType<typeof setCurrentPage>\nexport const setCurrentPage = (currentPage: number) => {\n    return {\n        type: 'SET-CURRENT-PAGE',\n        currentPage,\n    } as const\n}\n\ntype SetTotalUsersCountType = ReturnType<typeof setTotalUsersCount>\nexport const setTotalUsersCount = (totalUsersCount: number) => {\n    return {\n        type: 'SET-TOTAL-USERS-COUNT',\n        totalUsersCount,\n    } as const\n}\n\nexport const getUsers = (currentPage: number, pageSize: number) => (dispatch: Dispatch) => {\n    dispatch(toggleIsFetching(true))\n    usersAPI.getUsers(currentPage, pageSize)\n        .then(response => {\n            dispatch(toggleIsFetching(false))\n            dispatch(setUsers(response.items))\n            dispatch(setTotalUsersCount(response.totalCount))\n        })\n}\n\nexport const followUser = (userID: number) => (dispatch: Dispatch) => {\n    dispatch(toggleIsFollowing(true, userID))\n    usersAPI.followUser(userID)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(follow(userID))\n            }\n            dispatch(toggleIsFollowing(false, userID))\n        })\n}\n\nexport const unfollowUser = (userID: number) => (dispatch: Dispatch) => {\n    dispatch(toggleIsFollowing(true, userID))\n    usersAPI.unfollowUser(userID)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(unfollow(userID))\n            }\n            dispatch(toggleIsFollowing(false, userID))\n        })\n}\n\n","type AuthType = {\n    data: DataType\n    messages: Array<string>\n    fieldsErrors: Array<any>\n    resultCode: number\n    isAuth: boolean\n}\n\ntype DataType = {\n    id: number\n    login: string\n    email: string\n}\nconst initialState: AuthType = {\n    data: {\n        id: 20566,\n        login: \"itsidorkin\",\n        email: \"itsidorkin28@gmail.com\",\n    },\n    messages: [],\n    fieldsErrors: [],\n    resultCode: 0,\n    isAuth: false\n}\n\n\nexport const authReducer = (state = initialState, action: AuthActionsTypes): AuthType => {\n    switch (action.type) {\n        case 'SET-AUTH-USER-DATA':\n            return {...state, ...action.data, isAuth: true}\n        default:\n            return state\n    }\n}\n\nexport type AuthActionsTypes = SetUserDataType\n\ntype SetUserDataType = ReturnType<typeof setAuthUserData>\nexport const setAuthUserData = (id: number, login: string, email: string) => {\n    return {\n        type: 'SET-AUTH-USER-DATA',\n        data: {id, login, email}\n    } as const\n}\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {usersReducer} from \"./users-reducer\";\nimport {authReducer} from \"./auth-reducer\";\nimport thunkMiddleware from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n})\n\nexport type RootStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n//@ts-ignore\nconsole.log(window.store = store)\n\n\n","import s from './Navbar.module.scss'\nimport React from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nexport function Navbar() {\n    return (\n        <nav className={s.navbar}>\n            <div>\n               <NavLink to='/profile' className={({ isActive }) => isActive ? s.active : ''}>\n                   Profile\n               </NavLink>\n            </div>\n            <div>\n                <NavLink to='/dialogs' className={({ isActive }) => isActive ? s.active : ''}>\n                    Messages\n                </NavLink>\n            </div>\n            <div>\n                <NavLink to='/users' className={({ isActive }) => isActive ? s.active : ''}>\n                    Find Users\n                </NavLink>\n            </div>\n        </nav>\n    )\n}","import s from \"./DialogItem.module.scss\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\n\nexport type DialogItemType = {\n    id: string\n    name: string\n}\nexport const DialogItem = (props: DialogItemType) => {\n    let path = `/dialogs/${props.id}`\n\n    return (\n        <div className={s.dialogItem}>\n            <NavLink to={path} className={({ isActive }) => isActive ? s.active : ''}>{props.name}</NavLink>\n        </div>\n    )\n}","import s from \"./Message.module.scss\";\nimport React from \"react\";\n\nexport type MessageType = {\n    id: string\n    message: string\n}\nexport const Message = (props: MessageType) => {\n    return (\n        <div className={s.message}>\n            {props.message}\n        </div>\n    )\n}","import {connect} from 'react-redux';\nimport { Dispatch } from 'redux';\nimport {changeMessageAC, DialogsPageType, sendMessageAC} from '../../redux/dialogs-reducer';\nimport { RootStateType } from '../../redux/redux-store';\nimport {Dialogs} from \"./Dialogs\";\n\ntype MapStateToPropsType = {\n    dialogsPage: DialogsPageType\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\ntype MapDispatchToPropsType = {\n    changeMessage: (value: string) => void\n    sendMessage: (value: string) => void\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        changeMessage: (value: string) => {\n            const action = changeMessageAC(value)\n            dispatch(action)\n        },\n        sendMessage: (value: string) => {\n            const action = sendMessageAC(value)\n            dispatch(action)\n        }\n    }\n}\n\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React, {ChangeEvent, KeyboardEvent} from 'react'\nimport s from './Dialogs.module.scss'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\n\ntype DialogsType = {\n    dialogsPage: DialogsPageType\n    sendMessage: (value: string) => void\n    changeMessage: (value: string) => void\n}\n\nexport const Dialogs = (props: DialogsType) => {\n\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\n    const messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\n\n    const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changeMessage(e.currentTarget.value);\n    };\n\n    const sendMessage = () => {\n        const newMessage = props.dialogsPage.messageText.trim()\n        if (newMessage) {\n            props.sendMessage(newMessage)\n        }\n    }\n    const keyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.ctrlKey && e.key === 'Enter') {\n            sendMessage()\n        }\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messagesItems}>\n                {messagesElements}\n                <div>\n                    <Box\n                        component=\"form\"\n                        sx={{\n                            '& .MuiTextField-root': {mb: 1, width: '100%'},\n                        }}\n                        noValidate\n                        autoComplete=\"off\">\n                        <TextField\n                            id=\"outlined-multiline-flexible\"\n                            label=\"Type message\"\n                            multiline\n                            maxRows={4}\n                            value={props.dialogsPage.messageText}\n                            onChange={changeHandler}\n                            onKeyPress={keyPressHandler}/>\n\n                    </Box>\n                    <Stack direction=\"row\" spacing={1}>\n                        <Button variant=\"contained\" endIcon={<SendIcon/>} onClick={sendMessage}>\n                            Send\n                        </Button>\n                    </Stack>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport {Avatar, Button} from \"@mui/material\";\nimport s from \"./Users.module.scss\";\nimport {UserType} from \"../../redux/users-reducer\";\nimport {NavLink} from 'react-router-dom';\n\ntype UsersType = {\n    usersList: Array<UserType>\n    isFollowing: Array<number>\n    followUserHandler: (userID: number) => void\n    unfollowUserHandler: (userID: number) => void\n}\n\nexport const Users = React.memo(({usersList, isFollowing, followUserHandler, unfollowUserHandler}: UsersType) => {\n    return <div>\n        <div className={s.users}>\n            {usersList.map(u => {\n                return (\n                    <div key={u.id} className={s.user}>\n                        <div>\n                            <NavLink to={'/profile/' + u.id}>\n                                <Avatar alt={u.name} src={u.photos?.small} sx={{width: 100, height: 100}}/>\n                            </NavLink>\n                        </div>\n                        <div>\n                            {u.followed\n                                ? <Button onClick={() => unfollowUserHandler(u.id)}\n                                          variant=\"contained\"\n                                          color=\"error\"\n                                          size='small'\n                                          disabled={isFollowing.some(id => id === u.id)}>Unfollow</Button>\n                                : <Button onClick={() => followUserHandler(u.id)}\n                                          variant=\"contained\"\n                                          color=\"success\"\n                                          size='small'\n                                          disabled={isFollowing.some(id => id === u.id)}>Follow</Button>}\n                        </div>\n                        <span>{u.name}</span>\n                        <span>{u.status}</span>\n                    </div>\n                )\n            })}\n        </div>\n    </div>\n})\n\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../redux/redux-store\";\nimport {followUser, getUsers, unfollowUser, UserType} from \"../../redux/users-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {Users} from \"./Users\";\nimport {CircularProgress, Pagination} from \"@mui/material\";\n\n\nexport const UsersContainer = React.memo(() => {\n    const dispatch = useDispatch()\n    const isFetching = useSelector<RootStateType, boolean>(state => state.usersPage.isFetching)\n    const isFollowing = useSelector<RootStateType, Array<number>>(state => state.usersPage.isFollowing)\n    const usersList = useSelector<RootStateType, Array<UserType>>(state => state.usersPage.usersList)\n    const pageSize = useSelector<RootStateType, number>(state => state.usersPage.pageSize)\n    const totalUsersCount = useSelector<RootStateType, number>(state => state.usersPage.totalUsersCount)\n    const currentPage = useSelector<RootStateType, number>(state => state.usersPage.currentPage)\n\n    useEffect(() => {\n        dispatch(getUsers(currentPage, pageSize))\n    }, [])\n\n    const changeCurrentPage = useCallback((currentPage: number) => {\n        dispatch(getUsers(currentPage, pageSize))\n    }, [dispatch, pageSize])\n\n    const followUserHandler = useCallback((userID: number) => {\n        dispatch(followUser(userID))\n    }, [dispatch])\n\n    const unfollowUserHandler = useCallback((userID: number) => {\n        dispatch(unfollowUser(userID))\n    }, [dispatch])\n\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\n\n    return <div style={{display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center'}}>\n        <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n        }}>\n            <Pagination count={pagesCount} color=\"primary\" onChange={(e, value) => changeCurrentPage(value)}/>\n        </div>\n        {isFetching ? <CircularProgress style={{marginTop: '30px', marginBottom: '20px'}}/> :\n            <Users usersList={usersList}\n                   isFollowing={isFollowing}\n                   followUserHandler={followUserHandler}\n                   unfollowUserHandler={unfollowUserHandler}/>}\n    </div>\n\n})\n\n\n","import React from \"react\";\nimport s from './UserDescription.module.scss'\nimport {UserDescriptionType} from \"../../../redux/profile-reducer\";\nimport {Avatar} from \"@mui/material\";\n\ntype UserDescriptionPropsType = {\n    profile: UserDescriptionType\n}\n\nfunction UserDescription(props: UserDescriptionPropsType) {\n    return (\n        <div className={s.userDescription}>\n            <h3>{props.profile.fullName}</h3>\n            <Avatar alt={props.profile.fullName} src={props.profile.photos?.large} sx={{width: 150, height: 150}} style={{marginBottom: '15px'}}/>\n            <span>{props.profile.aboutMe}</span>\n        </div>\n    )\n}\n\nexport default UserDescription","import { Avatar } from '@mui/material'\nimport s from './Post.module.scss'\n\nexport type PostType = {\n    id: string\n    post: string\n    likesCount: number\n}\n\nfunction Post(props: PostType) {\n    return (\n        <div className={s.post}>\n                    <Avatar src=\"\" sx={{width: 50, height: 50}}/>\n                    <span>{props.post}</span>\n                    <span>Likes: {props.likesCount}</span>\n        </div>\n    )\n}\n\nexport default Post","import { connect } from \"react-redux\";\nimport {addPost, changePost, ProfilePageType} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {RootStateType} from \"../../../redux/redux-store\";\n\ntype MapStateToPropsType = {\n    profilePage: ProfilePageType\n}\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n    return {\n        profilePage: state.profilePage\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, {\n    changePost,\n    addPost,\n})(MyPosts)\n\n","import Post from \"./Post/Post\";\nimport s from './MyPosts.module.scss'\nimport {KeyboardEvent, ChangeEvent} from \"react\";\nimport TextField from '@mui/material/TextField';\nimport React from \"react\";\nimport {ProfilePageType} from \"../../../redux/profile-reducer\";\nimport { IconButton } from \"@mui/material\";\nimport { PostAdd } from \"@mui/icons-material\";\n\ntype MyPostType = {\n    profilePage: ProfilePageType\n    addPost: (value: string) => void\n    changePost: (value: string) => void\n\n}\n\nexport const MyPosts = (props: MyPostType) => {\n    const postsElements = props.profilePage.posts.map(m => <Post key={m.id} id={m.id} post={m.post}\n                                                                 likesCount={m.likesCount}/>)\n    const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changePost(e.currentTarget.value)\n    };\n\n    const addPost = () => {\n        const newPost = props.profilePage.postText.trim()\n        if (newPost) {\n            props.addPost(newPost)\n        }\n    }\n    const keyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.ctrlKey && e.key === 'Enter') {\n            addPost()\n        }\n    }\n    return (\n        <div className={s.myPosts}>\n            <h3>All posts</h3>\n            <div className={s.postForm}>\n                <TextField\n                    id=\"outlined-multiline-flexible\"\n                    label=\"What's new?\"\n                    multiline\n                    maxRows={4}\n                    value={props.profilePage.postText}\n                    onChange={changeHandler}\n                    onKeyPress={keyPressHandler}/>\n                <IconButton onClick={addPost} style={{marginLeft: '5px'}}>\n                    <PostAdd color=\"primary\"/>\n                </IconButton>\n            </div>\n            {postsElements}\n        </div>\n    )\n}","import s from './Profile.module.scss'\nimport React from \"react\";\nimport UserDescription from './UserDescription/UserDescription';\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\nimport {UserDescriptionType} from \"../../redux/profile-reducer\";\n\ntype ProfileType = {\n    profile: UserDescriptionType\n}\n\nexport function Profile({profile}: ProfileType) {\n    return <div className={s.profile}>\n        <UserDescription profile={profile}/>\n        <MyPostsContainer/>\n    </div>\n\n\n}","import s from './Profile.module.scss'\nimport React, {useEffect} from \"react\";\nimport {Profile} from './Profile';\nimport {setUserProfile, UserDescriptionType} from \"../../redux/profile-reducer\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {RootStateType} from \"../../redux/redux-store\";\n\nimport axios from \"axios\";\n\nimport {useParams} from 'react-router-dom';\n\n\nexport const ProfileContainer = React.memo(() => {\n    const dispatch = useDispatch()\n    const profile = useSelector<RootStateType, UserDescriptionType>(state => state.profilePage.profile)\n    let {userId} = useParams()\n    useEffect(() => {\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`)\n            .then(response => {\n                dispatch(setUserProfile(response.data))\n            })\n    }, [])\n\n\n    return (\n        <div className={s.profile}>\n            <Profile profile={profile}/>\n        </div>\n    )\n\n})\n\n\n","import React from 'react';\nimport {Route, Routes} from 'react-router-dom';\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from './components/Profile/ProfileContainer';\n\nexport const AppRoutes = () => {\n    return (\n        <div>\n            <Routes>\n                <Route path={'/profile/:userId'}\n                       element={<ProfileContainer/>}/>\n                <Route path={'/dialogs'}\n                       element={<DialogsContainer/>}/>\n                <Route path={'/users'}\n                       element={<UsersContainer/>}/>\n                <Route\n                    path=\"*\"\n                    element={\n                        <main>\n                            <p>There's nothing here!</p>\n                        </main>\n                    }\n                />\n            </Routes>\n        </div>\n    );\n};\n\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\ntype HeaderType = {\n    isAuth: boolean\n    login: string\n}\n\nexport const Header = React.memo(({isAuth, login}: HeaderType) => {\n    return (\n        <Box sx={{ flexGrow: 1, mb: 2 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        SOCIAL NETWORK\n                    </Typography>\n                    {isAuth ? login : <Button color=\"inherit\">Login</Button>}\n                </Toolbar>\n            </AppBar>\n        </Box>\n    )\n})","import * as React from 'react';\nimport {Header} from \"./Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport axios from \"axios\";\nimport {setAuthUserData} from \"../../redux/auth-reducer\";\nimport {RootStateType} from \"../../redux/redux-store\";\n\nexport const HeaderContainer = React.memo(() => {\n    const isAuth = useSelector<RootStateType, boolean>(state => state.auth.isAuth)\n    const login = useSelector<RootStateType, string>(state => state.auth.data.login)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {withCredentials: true})\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    let {id, login, email} = response.data.data\n                    dispatch(setAuthUserData(id, login, email))\n                }\n            })\n    }, [])\n    return <Header isAuth={isAuth} login={login}/>\n})\n","import React from 'react'\nimport './App.module.scss'\nimport s from './App.module.scss'\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport {AppRoutes} from \"./AppRoutes\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\n\nexport const App = () => {\n    return (\n        <div className={s.app}>\n            <HeaderContainer/>\n            <Container fixed maxWidth=\"lg\">\n                <Grid container spacing={2}>\n                    <Grid item xs={3}>\n                        <Paper style={{padding: '15px 0'}}>\n                            <Navbar/>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={9}>\n                        <Paper style={{padding: '15px 15px'}}>\n                            <AppRoutes/>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport './index.scss'\nimport {store} from \"./redux/redux-store\";\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport {App} from './App'\nimport reportWebVitals from './reportWebVitals'\nimport {BrowserRouter} from \"react-router-dom\"\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__10UeP\",\"active\":\"Navbar_active__21R_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__15I9R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Gkkf\",\"dialogsItems\":\"Dialogs_dialogsItems__2PZ9i\",\"messagesItems\":\"Dialogs_messagesItems__3JX3o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__1nzJQ\",\"active\":\"DialogItem_active__JdILs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__3CRqz\",\"user\":\"Users_user__1d1r4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2AZpm\",\"postForm\":\"MyPosts_postForm__1ywSN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__27Afv\"};"],"sourceRoot":""}